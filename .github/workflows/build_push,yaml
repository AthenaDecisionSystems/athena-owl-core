name: Publish Docker image
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      
jobs:
  validate-docker-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: Validate docker registry secrets are defined
      id: validate-docker-secrets
      run: |
        echo "Validating docker registry secrets are defined on the repository"

        FAIL=false

        validate_secret(){
          FIELD=$1
          VALUE=$2

          if [ -z "${VALUE}" ]; then
            echo "The secret ${FIELD} needs to be set on this repository."
            FAIL=true
          else
            echo "The secret ${FIELD} is set on this repository."
          fi
        }

        validate_secret DOCKER_USER ${DOCKER_USER}
        validate_secret DOCKER_PWD ${DOCKER_PWD}
        #validate_secret DOCKER_REPOSITORY ${DOCKER_REPOSITORY}
        #validate_secret DOCKER_IMAGE_COMMAND ${DOCKER_IMAGE_COMMAND}
        #validate_secret DOCKER_IMAGE_QUERY ${DOCKER_IMAGE_QUERY}
        #validate_secret DOCKER_REGISTRY ${DOCKER_REGISTRY}
        #validate_secret GITOPS_EMAIL ${GITOPS_EMAIL}
        #validate_secret GITOPS_TOKEN ${GITOPS_TOKEN}
        #validate_secret GITOPS_ORG ${GITOPS_ORG}

        if [ "${FAIL}" = "true" ]; then
          exit 1
        fi
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        #DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        #DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        #DOCKER_IMAGE_COMMAND: ${{ secrets.DOCKER_IMAGE_COMMAND }}
        #DOCKER_IMAGE_QUERY: ${{ secrets.DOCKER_IMAGE_QUERY }}
        #GITOPS_EMAIL: ${{ secrets.GITOPS_EMAIL }}
        #GITOPS_TOKEN: ${{ secrets.GITOPS_TOKEN }}
        #GITOPS_ORG: ${{ secrets.GITOPS_ORG }}

  push_to_registry:
    needs:
      validate-docker-secrets
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: jbcodeforce/athena-owl-backend

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./owl-agent-backend/src
          file: ./owl-agent-backend/src/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      
      * name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
